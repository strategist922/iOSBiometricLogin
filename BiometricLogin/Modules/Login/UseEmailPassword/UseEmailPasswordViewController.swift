//
//  UseEmailPasswordViewController.swift
//  BiometricLogin
//
//  Created by Zaim Ramlan on 25/04/2018.
//  Copyright (c) 2018 ZaimRamlan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol UseEmailPasswordDisplayLogic: class {
  func displayUseEmailPasswordResult(with viewModel: UseEmailPasswordModels.UseEmailPassword.ViewModel)
}

class UseEmailPasswordViewController: UIViewController, UseEmailPasswordDisplayLogic {

  // MARK: Properties

  var router: (NSObjectProtocol & UseEmailPasswordRoutingLogic & UseEmailPasswordDataPassing)?
  var interactor: UseEmailPasswordBusinessLogic?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = UseEmailPasswordInteractor()
    let presenter = UseEmailPasswordPresenter()
    let router = UseEmailPasswordRouter()

    viewController.router = router
    viewController.interactor = interactor
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: View Lifecycle

  override func viewDidLoad() {
    super.viewDidLoad()
    loginButton.hide(.withoutAnimation)
    activityIndicator.hide(.withoutAnimation)
    setupResultLabel()
  }
  
  override func viewDidAppear(_ animated: Bool) {
    super.viewDidAppear(animated)
    loginButton.show(.withAnimation)
  }

  // MARK: Result Label
  
  @IBOutlet var resultLabel: UILabel!
  @IBOutlet var resultLabelToSafeAreaTopConstraint: NSLayoutConstraint!
  func setupResultLabel() {
    resultLabel.sizeToFit()
    resultLabel.alpha = 0
    resultLabelToSafeAreaTopConstraint.constant = 0 - resultLabel.frame.height
  }
  
  func hideResultLabel() {
    UIView.animate(withDuration: 0.5) {
      self.resultLabelToSafeAreaTopConstraint.constant = 0 - self.resultLabel.frame.height
      self.resultLabel.alpha = 0
      self.view.layoutIfNeeded()
    }
  }
  
  func showResultLabel() {
    UIView.animate(withDuration: 0.5) {
      self.resultLabel.alpha = 1.0
      self.resultLabelToSafeAreaTopConstraint.constant = self.resultLabel.frame.height
      self.view.layoutIfNeeded()
    }
    
    DispatchQueue.main.asyncAfter(deadline: .now() + .seconds(2)) {
      self.hideResultLabel()
    }
  }
  
  func showSuccessResultLabel(_ text: String? = "Success ✅") {
    resultLabel.text = text
    resultLabel.sizeToFit()
    showResultLabel()
  }
  
  func showFailureResultLabel(_ text: String? = "Oops, textfields can't be empty ❌") {
    resultLabel.text = text
    resultLabel.sizeToFit()
    showResultLabel()
  }

  // MARK: Use Case - UseEmailPassword

  @IBOutlet var loginButton: UIButton!
  @IBOutlet var activityIndicator: UIActivityIndicatorView!
  @IBAction func loginButtonClicked(_ sender: Any) {
    loginButton.hide(.withAnimation)
    activityIndicator.show(.withAnimation)
    
    let request = UseEmailPasswordModels.UseEmailPassword.Request()
    interactor?.UseEmailPassword(with: request)
  }

  func displayUseEmailPasswordResult(with viewModel: UseEmailPasswordModels.UseEmailPassword.ViewModel) {
    activityIndicator.hide(.withAnimation)
    loginButton.show(.withAnimation)
    showFailureResultLabel()
  }
}
